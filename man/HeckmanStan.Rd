% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/HeckmanStan.R
\name{HeckmanStan}
\alias{HeckmanStan}
\title{Fit the Heckman Selection Stan model using the Normal, Student-t or Contaminated Normal distributions.}
\usage{
HeckmanStan(
  y,
  x,
  w,
  cc,
  family = "CN",
  init = "random",
  thin = 5,
  chains = 1,
  iter = 10,
  warmup = 5
)
}
\arguments{
\item{y}{A response vector.}

\item{x}{A covariate matrix for the response y.}

\item{w}{A covariate matrix for the missing indicator cc.}

\item{cc}{A missing indicator vector (1=observed, 0=missing) .
When using the CN distribution, the initial values for the proportion of bad observations and the degree of contamination.}

\item{family}{The family to be used (Normal, T or CN).}

\item{init}{Parameters specifies the initial values for model parameters.}

\item{thin}{An Interval at which samples are retained from the MCMC process to reduce autocorrelation.}

\item{chains}{The number of chains to run during the MCMC sampling. Running multiple chains is useful for checking convergence.}

\item{iter}{The total number of iterations for the MCMC sampling, determining how many samples will be drawn.}

\item{warmup}{The number of initial iterations that will be discarded as the algorithm stabilizes before collecting samples.}
}
\value{
An object of the class HeckmanStan with all the outputs provided from the function.
}
\description{
`HeckmanStan()` fits the Heckman selection model using a Bayesian approach to address sample selection bias.
}
\examples{
\donttest{
################################################################################
# Simulation
################################################################################
library(mvtnorm)
n<- 100
w<- cbind(1,rnorm(n),rnorm(n))
x<- cbind(w[,1:2])
type="CN"
sigma2<- 1
rho<-0.7
beta<- c(1,0.5)
gama<- c(1,0.3,-.5)
nu=c(0.1,0.1)
data<-geraHeckman(x,w,beta,gama,sigma2,rho,nu,type=type)
y<-data$y
cc<-data$cc
# Fit Heckman Normal Stan model
fit.n_stan <- HeckmanStan(y, x, w, cc, family="Normal", thin = 5, chains = 1, iter = 10000, warmup = 1000)
qoi=c("beta","gamma","sigma_e","sigma2", "rho","EAIC","EBIC")
print(fit.n_stan[[1]],par=qoi)
print(fit.n_stan[[2]])

# Plots for stanfit objects : https://mc-stan.org/rstan/reference/stanfit-method-plot.html#:~:text=plotfun.\%20A\%20character\%20string\%20naming\%20the\%20plotting\%20function\%20to\%20apply
library(rstan)
plot(fit.n_stan, pars=c("beta[1]","beta[2]", "gamma[1]", "gamma[2]", "gamma[3]", "rho", "sigma_e"))
plot(fit.n_stan, plotfun="hist", pars=c("beta[1]","beta[2]", "gamma[1]", "gamma[2]", "gamma[3]", "rho", "sigma_e"))
plot(fit.n_stan, plotfun="trace", pars=c("beta[1]","beta[2]", "gamma[1]", "gamma[2]", "gamma[3]", "rho", "sigma_e"))
plot(fit.n_stan, plotfun = "rhat")

# Fit Heckman Student-t Stan model
fit.t_stan <- HeckmanStan(y, x, w, cc, family="T", thin = 5, chains = 1, iter = 10000, warmup = 1000)
qoi=c("beta","gamma","sigma_e","sigma2", "rho","nu")
print(fit.t_stan[[1]],par=qoi)
print(fit.t_stan[[2]])

# Fit Heckman Contaminated Normal Stan model
fit.cn_stan <- HeckmanStan(y, x, w, cc, family="CN", thin = 5, chains = 1, iter = 10000, warmup = 1000)
qoi=c("beta","gamma","sigma_e","sigma2", "rho","nu1","nu2")
print(fit.cn_stan,par=qoi)

################################################################################
## Application: Wage data ##Data used in the OGUNDIMU paper.
################################################################################
library(AER)
data("PSID1976")
cc <- ifelse(PSID1976$participation=="yes", 1, 0) # cc == 0  missing data
attach(PSID1976)

# Transformed the factors variables into quantitative variables
city     <- ifelse(city=="yes", 1, 0)     # yes == 1 and no == 0
college  <- ifelse(college=="yes", 1, 0)  # yes == 1 and no == 0
hcollege <- ifelse(hcollege=="yes", 1, 0) # yes == 1 and no == 0

x1= hwage
x2= youngkids
x3= tax
x4= feducation
x5= education
x6= city
x <- cbind(1,x5,x6)
w <- cbind(1,x1,x2,x3,x4,x5,x6)
y <- ifelse(wage>0, log(wage), 0)
n<-length(cc)
library("HeckmanEM")
#Normal: STAN
ResN<- HeckmanEM(y, x, w, cc, nu = NULL, family="Normal", error = 1e-05,iter.max = 200, im=TRUE, criteria = TRUE)
initf1 <- function() {list(beta=ResN$beta, gamma=ResN$gamma,sigma_e=ResN$sigma,rho=ResN$rho)}
fit.cn_stan <-  HeckmanStan( y, x, w, cc, family="CN", init=initf1, thin = 5, chains = 1, iter = 10000, warmup = 1000)
print(fit.cn_stan[[1]],par=c("beta","gamma","sigma_e","sigma2", "rho","likel","EAIC","EBIC"))
print(fit.cn_stan[[2]])
detach(PSID1976)
}

}
